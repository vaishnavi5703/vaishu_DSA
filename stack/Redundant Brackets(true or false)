Sample Input 1 :
2
(a+b)
(a+c*b)+(c))
Sample Output 1 :
No
Yes
Explanation Of Sample Input 1 :
In the first test case, there are no redundant brackets. Hence, the output is “No”. 
In the second test case, the brackets around the alphabet ‘c’( index 8 and index 10) are redundant. Hence the output is “Yes”.


Sample Input 2 :
2
(a*b+(c/d))
((a/b))
Sample Output 2 :
No
Yes
Explanation Of Sample Input 2 :
In the first test case, there are no redundant brackets. Hence, the output is “No”. 
In the second test case, the brackets around the subexpression “(a+b)” ( index 0 and index 6) are redundant. Hence the output is “Yes”.



#include <bits/stdc++.h> 
bool findRedundantBrackets(string &s)
{
    // Write your code here.
    int i,n=s.length();
    stack<int>st;
    for(i=0;i<n;i++)
    {
        if(isalpha(s[i]))
        continue;
        if(s[i]!=')')
        st.push(s[i]);
        else if((s[i]==')'&&st.top()=='(')||st.empty())
        return true;
        else
        {
            while(st.top()!='(')
            {
                st.pop();
            }
            st.pop();
        }
    }
    while (!st.empty() && (st.top() != '(' && st.top() != ')'))
    st.pop();
    if(st.empty())
    return false;
    else
    return true;


}
