Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0




class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int>st;
        st.push(-1);
        int maxi=0,i=0,l,n=s.length();
        while(i<n)
        {
            if(s[i]=='(')
            st.push(i);
            else 
            {
                st.pop();
                if(st.empty())
                {
                    st.push(i);
                }
                else
                {
                    l=i-st.top();
                    maxi=max(maxi,l);
                }
            }
            i++;
        }
        return maxi;
    }
};
